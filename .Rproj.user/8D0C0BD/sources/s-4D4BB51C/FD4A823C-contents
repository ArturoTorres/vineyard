#' ---
#'title: "Budburst models -- grapevine plants"
#'author: "J.A. Torres-Matallana"

#'output            : pdf_document
#'fig_caption: true
#'---

#+ code, include = TRUE

# organization: Luxembourg Institute of Science and technology (LIST)
# date: 18.07.2019 - 18.07.2019

#' Compile Rmarkdown file
#'---------------------------------------------------------------------------------------------
#+ compilation, echo=FALSE, eval=FALSE, include=TRUE
library("rmarkdown")
rmarkdown::render("Budburst_Models.R", pdf_document())

# ====================================================================================================
# setup
# ====================================================================================================
#+ setup, echo=TRUE, eval=TRUE, include=TRUE
library(knitr)
library(gdata)
library(devtools)
has_devel()

library(roxygen2)
library(xts)


# ====================================================================================================
# loading and processing data
# ====================================================================================================
#+ load_process, echo=TRUE, eval=TRUE, include=TRUE

data <- read.xls("/home/torres_30400/Documents/02_working_post-doc/3-Production/02_projects/02_VinoManAOP/02_matlab/terroirfuture-master/yield_model/input/Meteodaten 1970-2017 Remich geordnet 171114.xlsx")

data1 <- data[,1:9]
head(data1)
tail(data1)

# write.csv(data1, file = "Meteodaten_1970-2017_Remich_geordnet_171114_subset.csv")

# ====================================================================================================
# creating time series from raw data
# ====================================================================================================
#+ raw2ts, echo=TRUE, eval=TRUE, include=TRUE

data1.xts <- Raw2xts(data1)
head(data1.xts)
tail(data1.xts)
summary(data1.xts)

# checking regularity of xts object
check.xts <- is.regular(x = data1.xts)

if(!check.xts) stop("the xts object is not regular")

# ====================================================================================================
# filling NAs
# ====================================================================================================
#+ fill_na, echo=TRUE, eval=TRUE, include=TRUE

# find and replace NAs and visualise time window (T.max)
ids.na <- Id.na(x = data1.xts$T.max)
plot.na(x = data1.xts$T.max, ids.na = ids.na)

data1.xts$T.max <- na.approx(data1.xts$T.max)
plot.na(data1.xts$T.max, ids.na = ids.na)

# find and replace NAs and visualise time window (T.min)
ids.na <- Id.na(x = data1.xts$T.min)
plot.na(x = data1.xts$T.min, ids.na = ids.na)

data1.xts$T.min <- na.approx(data1.xts$T.min)
plot.na(data1.xts$T.min, ids.na = ids.na)

# find and replace NAs and visualise time window (T.min)
ids.na <- Id.na(x = data1.xts$T.mittel)
plot.na(x = data1.xts$T.mittel, ids.na = ids.na)

data1.xts$T.mittel <- na.approx(data1.xts$T.mittel)
plot.na(data1.xts$T.mittel, ids.na = ids.na)

# find and replace NAs and visualise time window (N)
ids.na <- Id.na(x = data1.xts$N)
plot.na(x = data1.xts$N, ids.na = ids.na)

data1.xts$T.mittel <- na.approx(data1.xts$T.mittel)
plot.na(data1.xts$T.mittel, ids.na = ids.na)


# ====================================================================================================
# calculation of degree-days by the single triangle algorithm
# ====================================================================================================
#+ degree_days, echo=TRUE, eval=TRUE, include=TRUE

tmax <- as.numeric(coredata(data1.xts)[,5])
summary(tmax)

dd <- apply(X = coredata(data1.xts), MARGIN = 1, FUN = function(x){
  DD.single.triang(t.zero = 0, t.min = as.numeric(x[6]), t.max = as.numeric(x[5]))
  }
)

summary(dd)

dev.off()
plot(dd, typ="l")




